package samlprovider

import (
	"bytes"
	"crypto/tls"
	"crypto/x509"
	"encoding/base64"
	"encoding/xml"
	securityprotocol "github.com/KvalitetsIT/gosecurityprotocol"
	"github.com/google/uuid"
	"github.com/russellhaering/gosaml2/types"
	dsig "github.com/russellhaering/goxmldsig"
	"go.uber.org/zap"
	"gotest.tools/assert"
	"io/ioutil"
	"net/http"
	"net/url"
	"testing"
	"time"
	//	"fmt"
)

var (
	samlServiceProviderConfig *SamlServiceProviderConfig
	samlHandler               *SamlHandler
	testSamlServiceProvider   *SamlServiceProvider
)

func TestSamlHandler(t *testing.T) {
	setup()
	t.Run("Test IssamlRequest", testIsSamlRequest)
	t.Run("Test GetSessionId", testGetSessionId)
	t.Run("Test HandleSamlResponse invalid time", testHandleSamlLoginResponse_invalidTime)
	t.Run("Test HandleSamlResponse no saml response provided", testHandleSamlLoginResponse_noSamlResponse)
	t.Run("Test SAML metadata without SLO", testMetadata)
	t.Run("Test SAML Response with lots of attributes", testHandleSamlLoginResponse_withLotsOfAttributes)
	t.Run("Test HandleSamlResponse invalid ascii escape chars", testHandleSamlLoginResponse_withAsciiEscapeChars)
}

func setup() {
	keyPair, _ := tls.LoadX509KeyPair("testdata/sp.cer", "testdata/sp.pem")
	// download the metadata from keycloak
	samlServiceProviderConfig = new(SamlServiceProviderConfig)
	samlServiceProviderConfig.IdpMetaDataUrl = "http://keycloak:8080/auth/realms/test/protocol/saml/descriptor"
	samlServiceProviderConfig.ServiceProviderKeystore = &keyPair
	samlServiceProviderConfig.ExternalUrl = "http://localhost:8787"
	samlServiceProviderConfig.EntityId = "test"
	samlServiceProviderConfig.AudienceRestriction = "test"
	samlServiceProviderConfig.SignAuthnRequest = false
	samlServiceProviderConfig.Logger = zap.NewNop().Sugar()
	samlServiceProviderConfig.SamlMetadataPath = "/saml/metadata"
	samlServiceProviderConfig.SamlLogoutPath = "/saml/logout"
	samlServiceProviderConfig.SamlSLOPath = "/saml/SLO"
	samlServiceProviderConfig.SamlSSOPath = "/saml/SSO"
	samlServiceProviderConfig.SessionHeaderName = "MySessionCookie"
	samlServiceProviderConfig.CookieDomain = ""
	samlServiceProviderConfig.CookiePath = "/"
	sessionCache, _ := securityprotocol.NewMongoSessionCache("mongo", "sessions", "session")
	samlServiceProvider, _ := NewSamlServiceProviderFromConfig(samlServiceProviderConfig, sessionCache)

	testSamlServiceProvider = samlServiceProvider
	samlHandler = NewSamlHandler(samlServiceProviderConfig, samlServiceProvider)
}

func testMetadata(t *testing.T) {
	r := &http.Request{}
	r.Method = http.MethodGet
	url, _ := url.Parse("https://test.localhost/saml/metadata.xml")
	r.URL = url
	w := MockResponseWriter{}
	w.buffer = &bytes.Buffer{}
	_, err := samlHandler.handleMetadata(w, r)
	assert.NilError(t, err)
	entityDescriptor := &types.EntityDescriptor{}
	err = xml.Unmarshal(w.buffer.Bytes(), entityDescriptor)
	assert.NilError(t, err)
	assert.Equal(t, entityDescriptor.EntityID, "test")
	assert.Equal(t, len(entityDescriptor.SPSSODescriptor.SingleLogoutServices), 1)
	assert.Equal(t, entityDescriptor.SPSSODescriptor.SingleLogoutServices[0].Location, samlHandler.provider.SamlServiceProvider.ServiceProviderSLOURL)
	assert.Equal(t, len(entityDescriptor.SPSSODescriptor.AssertionConsumerServices), 1)
	assert.Equal(t, entityDescriptor.SPSSODescriptor.AssertionConsumerServices[0].Location, samlHandler.provider.SamlServiceProvider.AssertionConsumerServiceURL)

}

func testGetSessionId(t *testing.T) {
	headerWithCookie := http.Header{}
	sessionId := uuid.New().String()
	headerWithCookie.Add("Cookie", samlHandler.sessionHeaderName+"="+sessionId+";")
	foundInCookie := samlHandler.GetSessionId(&http.Request{Header: headerWithCookie})
	assert.Equal(t, sessionId, foundInCookie)

	header := http.Header{}
	header.Add(samlHandler.sessionHeaderName, sessionId)
	foundInHeader := samlHandler.GetSessionId(&http.Request{Header: header})
	assert.Equal(t, sessionId, foundInHeader)

	headerWithNoSession := http.Header{}
	notFound := samlHandler.GetSessionId(&http.Request{Header: headerWithNoSession})
	assert.Equal(t, "", notFound)

}

func testIsSamlRequest(t *testing.T) {
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.metadataPath}}))
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.logoutPath}}))
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.callbackPath}}))
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.sloCallbackPath}}))
	assert.Assert(t, !samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: "/noget" + samlHandler.sloCallbackPath}}))
	assert.Assert(t, !samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: "/saml"}}))
}

func testHandleSamlLoginResponse_invalidTime(t *testing.T) {
	r := &http.Request{}
	w := MockResponseWriter{}
	r.Method = http.MethodGet
	r.Form = url.Values{"SAMLResponse": {""}}
	response, err := samlHandler.handleSamlLoginResponse(w, r)
	assert.NilError(t, err)
	assert.Equal(t, http.StatusForbidden, response)
}

var (
	saved *securityprotocol.SessionData
)

type MockCache struct {
}

func (mc MockCache) SaveSessionData(sd *securityprotocol.SessionData) error {
	saved = sd
	return nil
}

func (mc MockCache) FindSessionDataForSessionId(sessionId string) (*securityprotocol.SessionData, error) {
	return nil, nil
}

func (mc MockCache) DeleteSessionData(sessionId string) error {
	return nil
}

func testHandleSamlLoginResponse_withAsciiEscapeChars(t *testing.T) {

	// See https://github.com/keycloak/keycloak/issues/14529

	// Given (trust VDX keycloak) and modify the serviceprovider to match the info from VDX
	sessionCache := new(MockCache)

	samlServiceProvider, _ := NewSamlServiceProviderFromConfig(samlServiceProviderConfig, sessionCache)
	samlHandler = NewSamlHandler(samlServiceProviderConfig, samlServiceProvider)

	certData, err := base64.StdEncoding.DecodeString("MIICmzCCAYMCBgF0JJioajANBgkqhkiG9w0BAQsFADARMQ8wDQYDVQQDDAZicm9rZXIwHhcNMjAwODI1MDc0ODM4WhcNMzAwODI1MDc1MDE4WjARMQ8wDQYDVQQDDAZicm9rZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+93ixkscJCqazFi9zxUZQjQm2JRyohPU41NbXMbo74QJ38VqTCIO5lPfISxASYn+023MYtvgDrmI83gef5k5Q7gfWI4IjSNq566e9FXwWYI3xgz6vty2OJBzXV9L18zQkqHQDHSV2SccdfmPK36HWU9H2IpW68H/6dzgv3X7HcUSEqb+wZ7qtTwc/I7UWYJuu37icCFvs4ay+C1D82Qbwl7+LdbeZ3zwYgFN6BpAwfW6uyzedItDApGXOUe9wFoupurtZOXpnYM3a5GvF44bgD9Os27G468ekvjoo1hgmXMUEjPtiOeihCITjctzVdoVHW8BRZrGlZvEiE9zfa4JDAgMBAAEwDQYJKoZIhvcNAQELBQADggEBALRJFSm8AgJaN53o4kCctDTRT9kPrMJm00ZmhuVq8lar7Qv5sMh4wk1oYWBlsVc1fLTXSgIw3O/XS/Q5ma+jTqL7o7Hx4Q6pzYwO56RNLZ8VrxUvqE1sNzhubIAgRVBwexHT8IwqfcSb72jYHT/I1JXp97dXFo0S982163jAxo3/wEwOQ19Xk6hW/0316XfUK+tvmADO64MFi/a33M46eM+lezoZFbrz70ZX49Aq96D7y12lH/YCSbws5mSRU5UW3CY5wkOnkh1FDUvxVzUgzDR3IP73vj9zbyD3CM1sRIb5pRPp8WFRpQElsxXOnfcOjGh7SQcfBNWhqzI8eT2CmYI=")
	assert.NilError(t, err)
	idpCert, err := x509.ParseCertificate(certData)
	assert.NilError(t, err)
	certStore := dsig.MemoryX509CertificateStore{
		Roots: []*x509.Certificate{},
	}
	certStore.Roots = append(certStore.Roots, idpCert)
	samlServiceProvider.SamlServiceProvider.IDPCertificateStore = &certStore
	samlServiceProvider.SamlServiceProvider.AssertionConsumerServiceURL = "https://vconf-stage.dk/booking/saml/sso"
	samlServiceProvider.SamlServiceProvider.IdentityProviderIssuer = "https://login.vconf-stage.dk/auth/realms/broker"
	samlServiceProvider.SamlServiceProvider.AudienceURI = "medcom:booking"
	const testTimeLayout = "Jan 2, 2006 at 15:04:05.000"
	now, _ := time.Parse(testTimeLayout, "Nov 3, 2022 at 07:13:49.400") //2022-11-03T07:13:49.208
	samlServiceProvider.SamlServiceProvider.Clock = dsig.NewFakeClockAt(now)

	myurl, err := url.Parse("http://pollerolle.dk")
	r := &http.Request{
		URL: myurl,
	}
	assert.NilError(t, err)
	w := MockResponseWriter{}
	r.Method = http.MethodGet
	r.Form = url.Values{"SAMLResponse": {""}}
	response, err := samlHandler.handleSamlLoginResponse(w, r)
	assert.NilError(t, err)
	assert.Equal(t, http.StatusFound, response)
	assert.Equal(t, "", saved.Authenticationtoken)
}

func testHandleSamlLoginResponse_withLotsOfAttributes(t *testing.T) {
	// Given
	content, readErr := ioutil.ReadFile("testdata/samlresponse_lotsofattributes.base64")
	assert.NilError(t, readErr)
	expectedAssertion, readErr := ioutil.ReadFile("testdata/samlresponse_lotsofattributes.assertion")
	expectedAssertionStr := string(expectedAssertion)
	assert.NilError(t, readErr)

	cert, err := tls.LoadX509KeyPair("./testdata/sp.cer", "./testdata/sp.pem")
	assert.NilError(t, err)

	// When
	assertionXmlString, err := GetSignedAssertions(string(content), &cert)

	// Then
	assert.NilError(t, err)
	assert.Equal(t, expectedAssertionStr, assertionXmlString)
}

func testHandleSamlLoginResponse_noSamlResponse(t *testing.T) {
	r := &http.Request{}
	w := MockResponseWriter{}
	r.Method = http.MethodGet
	response, err := samlHandler.handleSamlLoginResponse(w, r)
	assert.NilError(t, err)
	assert.Equal(t, http.StatusForbidden, response)
}

//Utils
type MockResponseWriter struct {
	statusCode int
	buffer     *bytes.Buffer
	headers    http.Header
}

func (w MockResponseWriter) Header() http.Header {
	if w.headers == nil {
		w.headers = make(map[string][]string)
	}
	return w.headers
}

func (w MockResponseWriter) Write(b []byte) (int, error) {
	if w.buffer != nil {
		return w.buffer.Write(b)
	}
	return 0, nil
}

func (w MockResponseWriter) WriteHeader(statusCode int) {
	w.statusCode = statusCode
}
