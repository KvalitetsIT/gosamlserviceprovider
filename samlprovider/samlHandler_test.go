package samlprovider

import (
	"crypto/tls"
	securityprotocol "github.com/KvalitetsIT/gosecurityprotocol"
	"github.com/google/uuid"
	"go.uber.org/zap"
	"gotest.tools/assert"
	"net/http"
	"net/url"
	"testing"
)

var (
	samlHandler *SamlHandler
)

func TestSamlHandler(t *testing.T) {
	setup()
	t.Run("Test IssamlRequest", testIsSamlRequest)
	t.Run("Test GetSessionId", testGetSessionId)
	t.Run("Test HandleSamlResponse invalid time", testHandleSamlLoginResponse_invalidTime)
	t.Run("Test HandleSamlResponse no saml response provided", testHandleSamlLoginResponse_noSamlResponse)
}

func setup() {
	keyPair, _ := tls.LoadX509KeyPair("testdata/sp.cer", "testdata/sp.pem")
	// download the metadata from keycloak
	c := new(SamlServiceProviderConfig)
	c.IdpMetaDataUrl = "http://keycloak:8080/auth/realms/test/protocol/saml/descriptor"
	c.ServiceProviderKeystore = &keyPair
	c.ExternalUrl = "http://localhost:8787"
	c.EntityId = "test"
	c.AudienceRestriction = "test"
	c.SignAuthnRequest = false
	c.Logger = zap.NewNop().Sugar()
	c.SamlMetadataPath = "/saml/metadata"
	c.SamlLogoutPath = "/saml/logout"
	c.SamlSLOPath = "/saml/SLO"
	c.SamlSSOPath = "/saml/SSO"
	c.SessionHeaderName = "MySessionCookie"
	c.CookieDomain = ""
	c.CookiePath = "/"
	sessionCache, _ := securityprotocol.NewMongoSessionCache("mongo", "sessions", "session")
	samlServiceProvider, _ := NewSamlServiceProviderFromConfig(c, sessionCache)

	samlHandler = NewSamlHandler(c, samlServiceProvider)
}

func testGetSessionId(t *testing.T) {
	headerWithCookie := http.Header{}
	sessionId := uuid.New().String()
	headerWithCookie.Add("Cookie", samlHandler.sessionHeaderName+"="+sessionId+";")
	foundInCookie, err := samlHandler.GetSessionId(&http.Request{Header: headerWithCookie})
	assert.NilError(t, err)
	assert.Equal(t, sessionId, foundInCookie)

	header := http.Header{}
	header.Add(samlHandler.sessionHeaderName, sessionId)
	foundInHeader, err := samlHandler.GetSessionId(&http.Request{Header: header})
	assert.NilError(t, err)
	assert.Equal(t, sessionId, foundInHeader)

	headerWithNoSession := http.Header{}
	notFound, err := samlHandler.GetSessionId(&http.Request{Header: headerWithNoSession})
	assert.NilError(t, err)
	assert.Equal(t, "", notFound)

}

func testIsSamlRequest(t *testing.T) {
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.metadataPath}}))
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.logoutPath}}))
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.callbackPath}}))
	assert.Assert(t, samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: samlHandler.sloCallbackPath}}))
	assert.Assert(t, !samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: "/noget" + samlHandler.sloCallbackPath}}))
	assert.Assert(t, !samlHandler.isSamlProtocol(&http.Request{URL: &url.URL{Path: "/saml"}}))
}

func testHandleSamlLoginResponse_invalidTime(t *testing.T) {
	r := &http.Request{}
	w := MockResponseWriter{}
	r.Method = http.MethodGet
	r.Form = url.Values{"SAMLResponse": {""}}
	response, err := samlHandler.handleSamlLoginResponse(w, r)
	assert.NilError(t, err)
	assert.Equal(t, http.StatusForbidden, response)
}

func testHandleSamlLoginResponse_noSamlResponse(t *testing.T) {
	r := &http.Request{}
	w := MockResponseWriter{}
	r.Method = http.MethodGet
	response, err := samlHandler.handleSamlLoginResponse(w, r)
	assert.NilError(t, err)
	assert.Equal(t, http.StatusForbidden, response)
}

//Utils
type MockResponseWriter struct {
	statusCode int
	headers    http.Header
}

func (w MockResponseWriter) Header() http.Header {
	return w.headers
}

func (w MockResponseWriter) Write([]byte) (int, error) {
	return 0, nil
}

func (w MockResponseWriter) WriteHeader(statusCode int) {

}
